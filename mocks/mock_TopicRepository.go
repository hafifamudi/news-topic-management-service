// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	common "github.com/hafifamudi/news-topic-management-service/internal/general/model/common"
	mock "github.com/stretchr/testify/mock"

	model "github.com/hafifamudi/news-topic-management-service/internal/core/topic/model"

	uuid "github.com/google/uuid"
)

// MockTopicRepository is an autogenerated mock type for the TopicRepository type
type MockTopicRepository struct {
	mock.Mock
}

type MockTopicRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTopicRepository) EXPECT() *MockTopicRepository_Expecter {
	return &MockTopicRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: topic
func (_m *MockTopicRepository) Create(topic *model.Topic) (*model.Topic, error) {
	ret := _m.Called(topic)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *model.Topic
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.Topic) (*model.Topic, error)); ok {
		return rf(topic)
	}
	if rf, ok := ret.Get(0).(func(*model.Topic) *model.Topic); ok {
		r0 = rf(topic)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Topic)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.Topic) error); ok {
		r1 = rf(topic)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTopicRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockTopicRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - topic *model.Topic
func (_e *MockTopicRepository_Expecter) Create(topic interface{}) *MockTopicRepository_Create_Call {
	return &MockTopicRepository_Create_Call{Call: _e.mock.On("Create", topic)}
}

func (_c *MockTopicRepository_Create_Call) Run(run func(topic *model.Topic)) *MockTopicRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.Topic))
	})
	return _c
}

func (_c *MockTopicRepository_Create_Call) Return(_a0 *model.Topic, _a1 error) *MockTopicRepository_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTopicRepository_Create_Call) RunAndReturn(run func(*model.Topic) (*model.Topic, error)) *MockTopicRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: topicID
func (_m *MockTopicRepository) Delete(topicID uuid.UUID) (*model.Topic, error) {
	ret := _m.Called(topicID)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 *model.Topic
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) (*model.Topic, error)); ok {
		return rf(topicID)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) *model.Topic); ok {
		r0 = rf(topicID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Topic)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(topicID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTopicRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockTopicRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - topicID uuid.UUID
func (_e *MockTopicRepository_Expecter) Delete(topicID interface{}) *MockTopicRepository_Delete_Call {
	return &MockTopicRepository_Delete_Call{Call: _e.mock.On("Delete", topicID)}
}

func (_c *MockTopicRepository_Delete_Call) Run(run func(topicID uuid.UUID)) *MockTopicRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID))
	})
	return _c
}

func (_c *MockTopicRepository_Delete_Call) Return(_a0 *model.Topic, _a1 error) *MockTopicRepository_Delete_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTopicRepository_Delete_Call) RunAndReturn(run func(uuid.UUID) (*model.Topic, error)) *MockTopicRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Find provides a mock function with given fields: id
func (_m *MockTopicRepository) Find(id uuid.UUID) (*common.Topic, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Find")
	}

	var r0 *common.Topic
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) (*common.Topic, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) *common.Topic); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*common.Topic)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTopicRepository_Find_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Find'
type MockTopicRepository_Find_Call struct {
	*mock.Call
}

// Find is a helper method to define mock.On call
//   - id uuid.UUID
func (_e *MockTopicRepository_Expecter) Find(id interface{}) *MockTopicRepository_Find_Call {
	return &MockTopicRepository_Find_Call{Call: _e.mock.On("Find", id)}
}

func (_c *MockTopicRepository_Find_Call) Run(run func(id uuid.UUID)) *MockTopicRepository_Find_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID))
	})
	return _c
}

func (_c *MockTopicRepository_Find_Call) Return(_a0 *common.Topic, _a1 error) *MockTopicRepository_Find_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTopicRepository_Find_Call) RunAndReturn(run func(uuid.UUID) (*common.Topic, error)) *MockTopicRepository_Find_Call {
	_c.Call.Return(run)
	return _c
}

// GetAll provides a mock function with given fields:
func (_m *MockTopicRepository) GetAll() ([]model.Topic, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []model.Topic
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]model.Topic, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []model.Topic); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Topic)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTopicRepository_GetAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAll'
type MockTopicRepository_GetAll_Call struct {
	*mock.Call
}

// GetAll is a helper method to define mock.On call
func (_e *MockTopicRepository_Expecter) GetAll() *MockTopicRepository_GetAll_Call {
	return &MockTopicRepository_GetAll_Call{Call: _e.mock.On("GetAll")}
}

func (_c *MockTopicRepository_GetAll_Call) Run(run func()) *MockTopicRepository_GetAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTopicRepository_GetAll_Call) Return(_a0 []model.Topic, _a1 error) *MockTopicRepository_GetAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTopicRepository_GetAll_Call) RunAndReturn(run func() ([]model.Topic, error)) *MockTopicRepository_GetAll_Call {
	_c.Call.Return(run)
	return _c
}

// Preload provides a mock function with given fields: topic
func (_m *MockTopicRepository) Preload(topic *model.Topic) (*model.Topic, error) {
	ret := _m.Called(topic)

	if len(ret) == 0 {
		panic("no return value specified for Preload")
	}

	var r0 *model.Topic
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.Topic) (*model.Topic, error)); ok {
		return rf(topic)
	}
	if rf, ok := ret.Get(0).(func(*model.Topic) *model.Topic); ok {
		r0 = rf(topic)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Topic)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.Topic) error); ok {
		r1 = rf(topic)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTopicRepository_Preload_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Preload'
type MockTopicRepository_Preload_Call struct {
	*mock.Call
}

// Preload is a helper method to define mock.On call
//   - topic *model.Topic
func (_e *MockTopicRepository_Expecter) Preload(topic interface{}) *MockTopicRepository_Preload_Call {
	return &MockTopicRepository_Preload_Call{Call: _e.mock.On("Preload", topic)}
}

func (_c *MockTopicRepository_Preload_Call) Run(run func(topic *model.Topic)) *MockTopicRepository_Preload_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.Topic))
	})
	return _c
}

func (_c *MockTopicRepository_Preload_Call) Return(_a0 *model.Topic, _a1 error) *MockTopicRepository_Preload_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTopicRepository_Preload_Call) RunAndReturn(run func(*model.Topic) (*model.Topic, error)) *MockTopicRepository_Preload_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: id, topic
func (_m *MockTopicRepository) Update(id uuid.UUID, topic *common.Topic) (*common.Topic, error) {
	ret := _m.Called(id, topic)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *common.Topic
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, *common.Topic) (*common.Topic, error)); ok {
		return rf(id, topic)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID, *common.Topic) *common.Topic); ok {
		r0 = rf(id, topic)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*common.Topic)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID, *common.Topic) error); ok {
		r1 = rf(id, topic)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTopicRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockTopicRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - id uuid.UUID
//   - topic *common.Topic
func (_e *MockTopicRepository_Expecter) Update(id interface{}, topic interface{}) *MockTopicRepository_Update_Call {
	return &MockTopicRepository_Update_Call{Call: _e.mock.On("Update", id, topic)}
}

func (_c *MockTopicRepository_Update_Call) Run(run func(id uuid.UUID, topic *common.Topic)) *MockTopicRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID), args[1].(*common.Topic))
	})
	return _c
}

func (_c *MockTopicRepository_Update_Call) Return(_a0 *common.Topic, _a1 error) *MockTopicRepository_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTopicRepository_Update_Call) RunAndReturn(run func(uuid.UUID, *common.Topic) (*common.Topic, error)) *MockTopicRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTopicRepository creates a new instance of MockTopicRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTopicRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTopicRepository {
	mock := &MockTopicRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
