// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	model "github.com/hafifamudi/news-topic-management-service/internal/core/news/model"
	request "github.com/hafifamudi/news-topic-management-service/internal/core/news/request"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// MockNewsService is an autogenerated mock type for the NewsService type
type MockNewsService struct {
	mock.Mock
}

type MockNewsService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockNewsService) EXPECT() *MockNewsService_Expecter {
	return &MockNewsService_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: req
func (_m *MockNewsService) Create(req request.CreateNewsRequest) (*model.News, error) {
	ret := _m.Called(req)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *model.News
	var r1 error
	if rf, ok := ret.Get(0).(func(request.CreateNewsRequest) (*model.News, error)); ok {
		return rf(req)
	}
	if rf, ok := ret.Get(0).(func(request.CreateNewsRequest) *model.News); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.News)
		}
	}

	if rf, ok := ret.Get(1).(func(request.CreateNewsRequest) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockNewsService_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockNewsService_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - req request.CreateNewsRequest
func (_e *MockNewsService_Expecter) Create(req interface{}) *MockNewsService_Create_Call {
	return &MockNewsService_Create_Call{Call: _e.mock.On("Create", req)}
}

func (_c *MockNewsService_Create_Call) Run(run func(req request.CreateNewsRequest)) *MockNewsService_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(request.CreateNewsRequest))
	})
	return _c
}

func (_c *MockNewsService_Create_Call) Return(_a0 *model.News, _a1 error) *MockNewsService_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockNewsService_Create_Call) RunAndReturn(run func(request.CreateNewsRequest) (*model.News, error)) *MockNewsService_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: newsID
func (_m *MockNewsService) Delete(newsID uuid.UUID) (*model.News, error) {
	ret := _m.Called(newsID)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 *model.News
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) (*model.News, error)); ok {
		return rf(newsID)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) *model.News); ok {
		r0 = rf(newsID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.News)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(newsID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockNewsService_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockNewsService_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - newsID uuid.UUID
func (_e *MockNewsService_Expecter) Delete(newsID interface{}) *MockNewsService_Delete_Call {
	return &MockNewsService_Delete_Call{Call: _e.mock.On("Delete", newsID)}
}

func (_c *MockNewsService_Delete_Call) Run(run func(newsID uuid.UUID)) *MockNewsService_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID))
	})
	return _c
}

func (_c *MockNewsService_Delete_Call) Return(_a0 *model.News, _a1 error) *MockNewsService_Delete_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockNewsService_Delete_Call) RunAndReturn(run func(uuid.UUID) (*model.News, error)) *MockNewsService_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Find provides a mock function with given fields: newsID
func (_m *MockNewsService) Find(newsID uuid.UUID) (*model.News, error) {
	ret := _m.Called(newsID)

	if len(ret) == 0 {
		panic("no return value specified for Find")
	}

	var r0 *model.News
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) (*model.News, error)); ok {
		return rf(newsID)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) *model.News); ok {
		r0 = rf(newsID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.News)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(newsID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockNewsService_Find_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Find'
type MockNewsService_Find_Call struct {
	*mock.Call
}

// Find is a helper method to define mock.On call
//   - newsID uuid.UUID
func (_e *MockNewsService_Expecter) Find(newsID interface{}) *MockNewsService_Find_Call {
	return &MockNewsService_Find_Call{Call: _e.mock.On("Find", newsID)}
}

func (_c *MockNewsService_Find_Call) Run(run func(newsID uuid.UUID)) *MockNewsService_Find_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID))
	})
	return _c
}

func (_c *MockNewsService_Find_Call) Return(_a0 *model.News, _a1 error) *MockNewsService_Find_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockNewsService_Find_Call) RunAndReturn(run func(uuid.UUID) (*model.News, error)) *MockNewsService_Find_Call {
	_c.Call.Return(run)
	return _c
}

// GetAll provides a mock function with given fields:
func (_m *MockNewsService) GetAll() ([]model.News, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []model.News
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]model.News, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []model.News); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.News)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockNewsService_GetAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAll'
type MockNewsService_GetAll_Call struct {
	*mock.Call
}

// GetAll is a helper method to define mock.On call
func (_e *MockNewsService_Expecter) GetAll() *MockNewsService_GetAll_Call {
	return &MockNewsService_GetAll_Call{Call: _e.mock.On("GetAll")}
}

func (_c *MockNewsService_GetAll_Call) Run(run func()) *MockNewsService_GetAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockNewsService_GetAll_Call) Return(_a0 []model.News, _a1 error) *MockNewsService_GetAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockNewsService_GetAll_Call) RunAndReturn(run func() ([]model.News, error)) *MockNewsService_GetAll_Call {
	_c.Call.Return(run)
	return _c
}

// Preload provides a mock function with given fields: news
func (_m *MockNewsService) Preload(news *model.News) (*model.News, error) {
	ret := _m.Called(news)

	if len(ret) == 0 {
		panic("no return value specified for Preload")
	}

	var r0 *model.News
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.News) (*model.News, error)); ok {
		return rf(news)
	}
	if rf, ok := ret.Get(0).(func(*model.News) *model.News); ok {
		r0 = rf(news)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.News)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.News) error); ok {
		r1 = rf(news)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockNewsService_Preload_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Preload'
type MockNewsService_Preload_Call struct {
	*mock.Call
}

// Preload is a helper method to define mock.On call
//   - news *model.News
func (_e *MockNewsService_Expecter) Preload(news interface{}) *MockNewsService_Preload_Call {
	return &MockNewsService_Preload_Call{Call: _e.mock.On("Preload", news)}
}

func (_c *MockNewsService_Preload_Call) Run(run func(news *model.News)) *MockNewsService_Preload_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.News))
	})
	return _c
}

func (_c *MockNewsService_Preload_Call) Return(_a0 *model.News, _a1 error) *MockNewsService_Preload_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockNewsService_Preload_Call) RunAndReturn(run func(*model.News) (*model.News, error)) *MockNewsService_Preload_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: req, newsID
func (_m *MockNewsService) Update(req request.UpdateNewsRequest, newsID uuid.UUID) (*model.News, error) {
	ret := _m.Called(req, newsID)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *model.News
	var r1 error
	if rf, ok := ret.Get(0).(func(request.UpdateNewsRequest, uuid.UUID) (*model.News, error)); ok {
		return rf(req, newsID)
	}
	if rf, ok := ret.Get(0).(func(request.UpdateNewsRequest, uuid.UUID) *model.News); ok {
		r0 = rf(req, newsID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.News)
		}
	}

	if rf, ok := ret.Get(1).(func(request.UpdateNewsRequest, uuid.UUID) error); ok {
		r1 = rf(req, newsID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockNewsService_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockNewsService_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - req request.UpdateNewsRequest
//   - newsID uuid.UUID
func (_e *MockNewsService_Expecter) Update(req interface{}, newsID interface{}) *MockNewsService_Update_Call {
	return &MockNewsService_Update_Call{Call: _e.mock.On("Update", req, newsID)}
}

func (_c *MockNewsService_Update_Call) Run(run func(req request.UpdateNewsRequest, newsID uuid.UUID)) *MockNewsService_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(request.UpdateNewsRequest), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockNewsService_Update_Call) Return(_a0 *model.News, _a1 error) *MockNewsService_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockNewsService_Update_Call) RunAndReturn(run func(request.UpdateNewsRequest, uuid.UUID) (*model.News, error)) *MockNewsService_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockNewsService creates a new instance of MockNewsService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockNewsService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockNewsService {
	mock := &MockNewsService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
