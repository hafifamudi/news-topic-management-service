// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	common "news-topic-management-service/internal/general/model/common"

	mock "github.com/stretchr/testify/mock"

	model "news-topic-management-service/internal/core/topic/model"

	request "news-topic-management-service/internal/core/topic/request"

	uuid "github.com/google/uuid"
)

// MockTopicService is an autogenerated mock type for the TopicService type
type MockTopicService struct {
	mock.Mock
}

type MockTopicService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTopicService) EXPECT() *MockTopicService_Expecter {
	return &MockTopicService_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: req
func (_m *MockTopicService) Create(req request.CreateTopicRequest) (*model.Topic, error) {
	ret := _m.Called(req)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *model.Topic
	var r1 error
	if rf, ok := ret.Get(0).(func(request.CreateTopicRequest) (*model.Topic, error)); ok {
		return rf(req)
	}
	if rf, ok := ret.Get(0).(func(request.CreateTopicRequest) *model.Topic); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Topic)
		}
	}

	if rf, ok := ret.Get(1).(func(request.CreateTopicRequest) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTopicService_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockTopicService_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - req request.CreateTopicRequest
func (_e *MockTopicService_Expecter) Create(req interface{}) *MockTopicService_Create_Call {
	return &MockTopicService_Create_Call{Call: _e.mock.On("Create", req)}
}

func (_c *MockTopicService_Create_Call) Run(run func(req request.CreateTopicRequest)) *MockTopicService_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(request.CreateTopicRequest))
	})
	return _c
}

func (_c *MockTopicService_Create_Call) Return(_a0 *model.Topic, _a1 error) *MockTopicService_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTopicService_Create_Call) RunAndReturn(run func(request.CreateTopicRequest) (*model.Topic, error)) *MockTopicService_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: topicID
func (_m *MockTopicService) Delete(topicID uuid.UUID) (*model.Topic, error) {
	ret := _m.Called(topicID)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 *model.Topic
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) (*model.Topic, error)); ok {
		return rf(topicID)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) *model.Topic); ok {
		r0 = rf(topicID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Topic)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(topicID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTopicService_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockTopicService_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - topicID uuid.UUID
func (_e *MockTopicService_Expecter) Delete(topicID interface{}) *MockTopicService_Delete_Call {
	return &MockTopicService_Delete_Call{Call: _e.mock.On("Delete", topicID)}
}

func (_c *MockTopicService_Delete_Call) Run(run func(topicID uuid.UUID)) *MockTopicService_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID))
	})
	return _c
}

func (_c *MockTopicService_Delete_Call) Return(_a0 *model.Topic, _a1 error) *MockTopicService_Delete_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTopicService_Delete_Call) RunAndReturn(run func(uuid.UUID) (*model.Topic, error)) *MockTopicService_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Find provides a mock function with given fields: topicID
func (_m *MockTopicService) Find(topicID uuid.UUID) (*common.Topic, error) {
	ret := _m.Called(topicID)

	if len(ret) == 0 {
		panic("no return value specified for Find")
	}

	var r0 *common.Topic
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) (*common.Topic, error)); ok {
		return rf(topicID)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) *common.Topic); ok {
		r0 = rf(topicID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*common.Topic)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(topicID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTopicService_Find_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Find'
type MockTopicService_Find_Call struct {
	*mock.Call
}

// Find is a helper method to define mock.On call
//   - topicID uuid.UUID
func (_e *MockTopicService_Expecter) Find(topicID interface{}) *MockTopicService_Find_Call {
	return &MockTopicService_Find_Call{Call: _e.mock.On("Find", topicID)}
}

func (_c *MockTopicService_Find_Call) Run(run func(topicID uuid.UUID)) *MockTopicService_Find_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID))
	})
	return _c
}

func (_c *MockTopicService_Find_Call) Return(_a0 *common.Topic, _a1 error) *MockTopicService_Find_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTopicService_Find_Call) RunAndReturn(run func(uuid.UUID) (*common.Topic, error)) *MockTopicService_Find_Call {
	_c.Call.Return(run)
	return _c
}

// GetAll provides a mock function with given fields:
func (_m *MockTopicService) GetAll() ([]model.Topic, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []model.Topic
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]model.Topic, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []model.Topic); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Topic)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTopicService_GetAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAll'
type MockTopicService_GetAll_Call struct {
	*mock.Call
}

// GetAll is a helper method to define mock.On call
func (_e *MockTopicService_Expecter) GetAll() *MockTopicService_GetAll_Call {
	return &MockTopicService_GetAll_Call{Call: _e.mock.On("GetAll")}
}

func (_c *MockTopicService_GetAll_Call) Run(run func()) *MockTopicService_GetAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTopicService_GetAll_Call) Return(_a0 []model.Topic, _a1 error) *MockTopicService_GetAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTopicService_GetAll_Call) RunAndReturn(run func() ([]model.Topic, error)) *MockTopicService_GetAll_Call {
	_c.Call.Return(run)
	return _c
}

// Preload provides a mock function with given fields: topic
func (_m *MockTopicService) Preload(topic *model.Topic) (*model.Topic, error) {
	ret := _m.Called(topic)

	if len(ret) == 0 {
		panic("no return value specified for Preload")
	}

	var r0 *model.Topic
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.Topic) (*model.Topic, error)); ok {
		return rf(topic)
	}
	if rf, ok := ret.Get(0).(func(*model.Topic) *model.Topic); ok {
		r0 = rf(topic)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Topic)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.Topic) error); ok {
		r1 = rf(topic)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTopicService_Preload_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Preload'
type MockTopicService_Preload_Call struct {
	*mock.Call
}

// Preload is a helper method to define mock.On call
//   - topic *model.Topic
func (_e *MockTopicService_Expecter) Preload(topic interface{}) *MockTopicService_Preload_Call {
	return &MockTopicService_Preload_Call{Call: _e.mock.On("Preload", topic)}
}

func (_c *MockTopicService_Preload_Call) Run(run func(topic *model.Topic)) *MockTopicService_Preload_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.Topic))
	})
	return _c
}

func (_c *MockTopicService_Preload_Call) Return(_a0 *model.Topic, _a1 error) *MockTopicService_Preload_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTopicService_Preload_Call) RunAndReturn(run func(*model.Topic) (*model.Topic, error)) *MockTopicService_Preload_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: req, topicID
func (_m *MockTopicService) Update(req request.UpdateTopicRequest, topicID uuid.UUID) (*common.Topic, error) {
	ret := _m.Called(req, topicID)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *common.Topic
	var r1 error
	if rf, ok := ret.Get(0).(func(request.UpdateTopicRequest, uuid.UUID) (*common.Topic, error)); ok {
		return rf(req, topicID)
	}
	if rf, ok := ret.Get(0).(func(request.UpdateTopicRequest, uuid.UUID) *common.Topic); ok {
		r0 = rf(req, topicID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*common.Topic)
		}
	}

	if rf, ok := ret.Get(1).(func(request.UpdateTopicRequest, uuid.UUID) error); ok {
		r1 = rf(req, topicID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTopicService_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockTopicService_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - req request.UpdateTopicRequest
//   - topicID uuid.UUID
func (_e *MockTopicService_Expecter) Update(req interface{}, topicID interface{}) *MockTopicService_Update_Call {
	return &MockTopicService_Update_Call{Call: _e.mock.On("Update", req, topicID)}
}

func (_c *MockTopicService_Update_Call) Run(run func(req request.UpdateTopicRequest, topicID uuid.UUID)) *MockTopicService_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(request.UpdateTopicRequest), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockTopicService_Update_Call) Return(_a0 *common.Topic, _a1 error) *MockTopicService_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTopicService_Update_Call) RunAndReturn(run func(request.UpdateTopicRequest, uuid.UUID) (*common.Topic, error)) *MockTopicService_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTopicService creates a new instance of MockTopicService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTopicService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTopicService {
	mock := &MockTopicService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
